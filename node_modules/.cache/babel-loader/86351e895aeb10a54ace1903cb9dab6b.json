{"ast":null,"code":"var _jsxFileName = \"/Users/rrai1/workspace/Practice/library-management/src/client/components/BookFormModal/BookFormModal.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as actionCreator from '../../actions/AddBookAction';\nimport './BookFormModal.css';\nimport Button from '../Button/Button';\nimport Form from '../Form/Form';\n\nclass AddBooks extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.saveBookHandler = () => {\n      if (this.props.btnAction === 'add') {\n        this.clearState(); //creates the payload which has to be saved in backend\n\n        let obj = this.getFormObject(Math.random(), this.props.selectedRecord.name, this.props.selectedRecord.description, this.props.selectedRecord.category, this.props.selectedRecord.author, this.props.selectedRecord.price);\n        this.props.onAddClick(obj);\n      } else if (this.props.btnAction === 'edit') {\n        let obj = this.getFormObject(this.props.selectedRecord.index, this.props.selectedRecord.name, this.props.selectedRecord.description, this.props.selectedRecord.category, this.props.selectedRecord.author, this.props.selectedRecord.price);\n        this.props.onUpdateClick(obj);\n      }\n\n      this.props.manageModal(false, '');\n    };\n\n    this.InputChange = event => {\n      if (event.target.name === 'name') {\n        if (event.target.value) {\n          this.props.enableSave(true);\n        } else {\n          this.props.enableSave(false);\n        }\n      }\n\n      this.props.changeRecord(event.target.name, event.target.value);\n    };\n\n    this.clearState = () => {\n      this.props.clearRecord();\n    };\n\n    this.clearHandler = () => {\n      this.clearState();\n    };\n\n    this.handleCloseClick = () => {\n      this.props.manageModal(false, '');\n    };\n\n    this.getFormObject = (index, name, desc, category, author, price) => {\n      let obj = {\n        index: index,\n        name: name,\n        description: desc,\n        category: category,\n        author: author,\n        price: price\n      };\n      return obj;\n    };\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, this.props.showModal ? React.createElement(\"div\", {\n      className: \"modal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"innerModal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      className: \"modalHeader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Edit\"), React.createElement(\"span\", {\n      onClick: this.handleCloseClick,\n      className: \"closeButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"\\xD7\"), React.createElement(Form, {\n      item: this.props.selectedRecord,\n      handleChange: this.InputChange.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"modalAction\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(Button, {\n      text: \"save\",\n      parentClickHandler: this.saveBookHandler,\n      state: this.props.isSaveDisabled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(Button, {\n      text: \"Clear\",\n      parentClickHandler: this.clearHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    })))) : null);\n  }\n\n}\n\nconst mapStateToProps = store => {\n  return {\n    books: store.books,\n    selectedIndex: store.selectedIndex,\n    btnAction: store.btnAction,\n    showModal: store.showModal,\n    selectedRecord: store.selectedRecord,\n    isSaveDisabled: store.isSaveDisabled\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAddClick: obj => {\n      return dispatch(actionCreator.addBook(obj));\n    },\n    onUpdateClick: obj => {\n      return dispatch(actionCreator.updateBook(obj));\n    },\n    manageModal: (showModal, action) => {\n      return dispatch(actionCreator.manageModal(showModal, action));\n    },\n    changeRecord: (name, value) => {\n      return dispatch(actionCreator.changeRecord(name, value));\n    },\n    clearRecord: obj => {\n      return dispatch(actionCreator.clearRecord());\n    },\n    enableSave: value => {\n      return dispatch(actionCreator.enableSave(value));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddBooks);","map":{"version":3,"sources":["/Users/rrai1/workspace/Practice/library-management/src/client/components/BookFormModal/BookFormModal.js"],"names":["React","connect","actionCreator","Button","Form","AddBooks","Component","saveBookHandler","props","btnAction","clearState","obj","getFormObject","Math","random","selectedRecord","name","description","category","author","price","onAddClick","index","onUpdateClick","manageModal","InputChange","event","target","value","enableSave","changeRecord","clearRecord","clearHandler","handleCloseClick","desc","render","showModal","bind","isSaveDisabled","mapStateToProps","store","books","selectedIndex","mapDispatchToProps","dispatch","addBook","updateBook","action"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport * as actionCreator from '../../actions/AddBookAction';\nimport './BookFormModal.css';\nimport Button from '../Button/Button';\nimport Form from '../Form/Form';\n\n\nclass AddBooks extends React.Component {\n\n    /*\n    *Handler to save the book details\n    */\n    saveBookHandler = () => {\n\n        if (this.props.btnAction === 'add') {\n            this.clearState();\n            //creates the payload which has to be saved in backend\n            let obj = this.getFormObject(\n                Math.random(),\n                this.props.selectedRecord.name,\n                this.props.selectedRecord.description,\n                this.props.selectedRecord.category,\n                this.props.selectedRecord.author,\n                this.props.selectedRecord.price\n            )\n            this.props.onAddClick(obj)\n\n        }\n        else if (this.props.btnAction === 'edit') {\n            let obj = this.getFormObject(this.props.selectedRecord.index, this.props.selectedRecord.name,\n                this.props.selectedRecord.description,\n                this.props.selectedRecord.category,\n                this.props.selectedRecord.author,\n                this.props.selectedRecord.price)\n            this.props.onUpdateClick(obj)\n        }\n        this.props.manageModal(false, '');\n    }\n//Title is mandatory field, if it isnot entred disable save else enable save\n    InputChange = (event) => {\n        if (event.target.name === 'name') {\n            if (event.target.value) {\n                this.props.enableSave(true);\n            }\n            else {\n                this.props.enableSave(false);\n\n            }\n        }\n        this.props.changeRecord(event.target.name, event.target.value);\n    }\n\n    //handler to clear the form details\n    clearState = () => {\n        this.props.clearRecord();\n    }\n    clearHandler = () => {\n        this.clearState();\n    }\n    handleCloseClick = () => {\n        this.props.manageModal(false, '');\n    }\n\n    //create the form payload which has to be add to backend\n    getFormObject = (index, name, desc, category, author, price) => {\n        let obj = {\n            index: index,\n            name: name,\n            description: desc,\n            category: category,\n            author: author,\n            price: price\n        }\n        return obj;\n    }\n    render() {\n        return (\n            <>\n                {this.props.showModal ?\n                    <div className=\"modal\">\n                        <div className=\"innerModal\">\n                            <h5 className='modalHeader'>Edit</h5>\n                            <span onClick={this.handleCloseClick} className=\"closeButton\">&times;</span>\n                            <Form item={this.props.selectedRecord} handleChange={this.InputChange.bind(this)} />\n                            <div className='modalAction'>\n                                <Button text=\"save\" parentClickHandler={this.saveBookHandler}\n                                    state={this.props.isSaveDisabled} />\n                                <Button text=\"Clear\" parentClickHandler={this.clearHandler} />\n                            </div>\n                        </div>\n                    </div> : null}\n            </>\n        )\n    }\n}\n\nconst mapStateToProps = store => {\n    return {\n        books: store.books,\n        selectedIndex: store.selectedIndex,\n        btnAction: store.btnAction,\n        showModal: store.showModal,\n        selectedRecord: store.selectedRecord,\n        isSaveDisabled: store.isSaveDisabled\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAddClick: (obj) => {\n            return dispatch(actionCreator.addBook(obj))\n        },\n\n        onUpdateClick: (obj) => {\n            return dispatch(actionCreator.updateBook(obj))\n        },\n        manageModal: (showModal, action) => {\n            return dispatch(actionCreator.manageModal(showModal, action))\n        },\n        changeRecord: (name, value) => {\n            return dispatch(actionCreator.changeRecord(name, value))\n        },\n        clearRecord: (obj) => {\n            return dispatch(actionCreator.clearRecord())\n        },\n        enableSave: (value) => {\n            return dispatch(actionCreator.enableSave(value))\n        }\n    };\n};\n\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(AddBooks);"]},"metadata":{},"sourceType":"module"}