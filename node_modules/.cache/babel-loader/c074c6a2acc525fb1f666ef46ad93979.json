{"ast":null,"code":"var _jsxFileName = \"/Users/rrai1/workspace/Practice/library-management-system/src/client/components/BookDashboard/BookDashboard.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as actionCreator from '../../actions/AddBookAction';\nimport SearchBook from '../SearchBook/SearchBook';\nimport Table from '../Table/Table';\nimport './BookDashboard.scss';\nimport * as utils from '../../utils/common'; //parent container\n\nclass BookDashboard extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.changeCurry = (selectedIndex, method) => e => {\n      if (e.target.checked) {\n        method(selectedIndex);\n      }\n    };\n\n    this.fireAPICall = debounced(() => {\n      this.props.filterList(value);\n    }, 1000);\n\n    this.onChangeHandler = selectedIndex => {\n      this.props.onSelectionChange(selectedIndex);\n    };\n\n    this.handleSearch = event => {\n      utils.debounced(this.filterDebounce(event.target.value), 10000);\n    };\n\n    this.filterDebounce = value => {\n      this.props.filterList(value);\n    };\n  }\n\n  componentDidMount() {\n    this.props.getBooks();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(SearchBook, {\n      parentSearchHandler: this.handleSearch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }), React.createElement(Table, {\n      onChangeHandler: this.onChangeHandler,\n      bookList: this.props.books,\n      parentTableSelection: this.changeCurry,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSelectionChange: index => {\n      return dispatch(actionCreator.selectItem(index));\n    },\n    getBooks: index => {\n      return dispatch(actionCreator.getBooks());\n    },\n    filterList: value => {\n      return dispatch(actionCreator.searchBook(value));\n    }\n  };\n};\n\nconst mapStateToProps = store => {\n  return {\n    books: store.books\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BookDashboard);","map":{"version":3,"sources":["/Users/rrai1/workspace/Practice/library-management-system/src/client/components/BookDashboard/BookDashboard.js"],"names":["React","connect","actionCreator","SearchBook","Table","utils","BookDashboard","Component","changeCurry","selectedIndex","method","e","target","checked","fireAPICall","debounced","props","filterList","value","onChangeHandler","onSelectionChange","handleSearch","event","filterDebounce","componentDidMount","getBooks","render","books","mapDispatchToProps","dispatch","index","selectItem","searchBook","mapStateToProps","store"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,aAAZ,MAA+B,6BAA/B;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAO,sBAAP;AACA,OAAO,KAAKC,KAAZ,MAAuB,oBAAvB,C,CAEA;;AACA,MAAMC,aAAN,SAA4BN,KAAK,CAACO,SAAlC,CAA4C;AAAA;AAAA;;AAAA,SAExCC,WAFwC,GAE1B,CAACC,aAAD,EAAgBC,MAAhB,KAA2BC,CAAC,IAAI;AAC1C,UAAIA,CAAC,CAACC,MAAF,CAASC,OAAb,EAAsB;AAClBH,QAAAA,MAAM,CAACD,aAAD,CAAN;AACH;AACJ,KANuC;;AAAA,SAOxCK,WAPwC,GAO1BC,SAAS,CAAC,MAAM;AAC1B,WAAKC,KAAL,CAAWC,UAAX,CAAsBC,KAAtB;AACH,KAFsB,EAEpB,IAFoB,CAPiB;;AAAA,SAWxCC,eAXwC,GAWrBV,aAAD,IAAmB;AACjC,WAAKO,KAAL,CAAWI,iBAAX,CAA6BX,aAA7B;AACH,KAbuC;;AAAA,SAcxCY,YAdwC,GAcxBC,KAAD,IAAW;AACtBjB,MAAAA,KAAK,CAACU,SAAN,CAAgB,KAAKQ,cAAL,CAAoBD,KAAK,CAACV,MAAN,CAAaM,KAAjC,CAAhB,EAAwD,KAAxD;AAEH,KAjBuC;;AAAA,SAkBxCK,cAlBwC,GAkBtBL,KAAD,IAAS;AACtB,WAAKF,KAAL,CAAWC,UAAX,CAAsBC,KAAtB;AACH,KApBuC;AAAA;;AAqBxCM,EAAAA,iBAAiB,GAAE;AACf,SAAKR,KAAL,CAAWS,QAAX;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,UAAD;AAAY,MAAA,mBAAmB,EAAE,KAAKL,YAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,KAAD;AAAO,MAAA,eAAe,EAAE,KAAKF,eAA7B;AAA8C,MAAA,QAAQ,EAAE,KAAKH,KAAL,CAAWW,KAAnE;AAA0E,MAAA,oBAAoB,EAAE,KAAKnB,WAArG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ;AAMH;;AAhCuC;;AAmC5C,MAAMoB,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHT,IAAAA,iBAAiB,EAAGU,KAAD,IAAW;AAC1B,aAAOD,QAAQ,CAAC3B,aAAa,CAAC6B,UAAd,CAAyBD,KAAzB,CAAD,CAAf;AACH,KAHE;AAIHL,IAAAA,QAAQ,EAAGK,KAAD,IAAW;AACjB,aAAOD,QAAQ,CAAC3B,aAAa,CAACuB,QAAd,EAAD,CAAf;AACH,KANE;AAOHR,IAAAA,UAAU,EAAGC,KAAD,IAAW;AACnB,aAAOW,QAAQ,CAAC3B,aAAa,CAAC8B,UAAd,CAAyBd,KAAzB,CAAD,CAAf;AACH;AATE,GAAP;AAWH,CAZD;;AAcA,MAAMe,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAO;AACHP,IAAAA,KAAK,EAAEO,KAAK,CAACP;AADV,GAAP;AAGH,CAJD;;AAMA,eAAe1B,OAAO,CAClBgC,eADkB,EAElBL,kBAFkB,CAAP,CAEStB,aAFT,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport * as actionCreator from '../../actions/AddBookAction';\nimport SearchBook from '../SearchBook/SearchBook';\nimport Table from '../Table/Table';\nimport './BookDashboard.scss';\nimport * as utils from '../../utils/common';\n\n//parent container\nclass BookDashboard extends React.Component {\n\n    changeCurry = (selectedIndex, method) => e => {\n        if (e.target.checked) {\n            method(selectedIndex);\n        }\n    }\n    fireAPICall = debounced(() => {\n        this.props.filterList(value);\n    }, 1000);\n\n    onChangeHandler = (selectedIndex) => {\n        this.props.onSelectionChange(selectedIndex)\n    }\n    handleSearch = (event) => {\n        utils.debounced(this.filterDebounce(event.target.value),10000)\n       \n    }\n    filterDebounce = (value)=>{\n        this.props.filterList(value);\n    }\n    componentDidMount(){\n        this.props.getBooks();\n    }\n\n    render() {\n        return (\n            <div>\n                <SearchBook parentSearchHandler={this.handleSearch} />\n                <Table onChangeHandler={this.onChangeHandler} bookList={this.props.books} parentTableSelection={this.changeCurry} />\n            </div>\n        )\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onSelectionChange: (index) => {\n            return dispatch(actionCreator.selectItem(index))\n        },\n        getBooks: (index) => {\n            return dispatch(actionCreator.getBooks())\n        },\n        filterList: (value) => {\n            return dispatch(actionCreator.searchBook(value))\n        }\n    };\n};\n\nconst mapStateToProps = store => {\n    return {\n        books: store.books\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps)(BookDashboard);"]},"metadata":{},"sourceType":"module"}